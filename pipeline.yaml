apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: set-commit-status
spec:
  params:
    - name: webhook-payload
    - name: tekton-base-url
  tasks:
    - name: set-commit-status
      taskRef:
        name: set-commit-status-task
      params:
        - name: pipeline_name
          value: "$(context.pipelineRun.name)"
        - name: pipeline_namespace
          value: "$(context.pipelineRun.namespace)"
        - name: tekton_url
          value: "$(params.tekton-base-url)"
        - name: webhook-payload
          value: $(params.webhook-payload)
---

apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: set-commit-status-task
spec:
  params:
    - name: pipeline_name
    - name: pipeline_namespace
    - name: tekton_url
      default: ""
    - name: webhook-payload
      default: "" 
    - name: state
      default: ""
    - name: description
      default: "Test set commit status"
    - name: context
      default: "continuous-integration/tekton"
  steps:
    - name: set-commit-status
      image: python:alpine
      env:
        - name: PIPELINE_DEBUG
          value: "1"
        - name: GIT_TOKEN
          valueFrom:
            secretKeyRef:
              name: git-token
              key: token
      script: |
        #!/usr/local/bin/python3
        import json
        import os
        import sys
        import urllib.request
        import urllib.parse

        ###### adapt common values to python syntax
        false=False
        true=True
        null=None
        ############



        ########## params variables ##########
        description = "$(params.description)"
        context = "$(params.context)"
        target_url = "$(params.tekton_url)/#/namespaces/$(params.pipeline_namespace)/pipelineruns/$(params.pipeline_name)"        
        webhook_payload = $(params.webhook-payload)

        ########## git variables ##########
        git_revision = ""
        git_service_type = ""
        git_url = ""
        git_token = ""
        git_state_mapping = {}
        
        ########## determine git_service_type ##########
        url = webhook_payload["repository"]["url"]
        if "https://github.com" in url:
          git_service_type = "github"
        elif "git@gitlab.com" in url:
          git_service_type = "gitlab"
        ################################################

        git_token=json.loads(os.environ["GIT_TOKEN"])[git_service_type]


        if git_service_type == "github":
          if "head_commit" in webhook_payload.keys():
            git_revision = webhook_payload["head_commit"]["id"]
          api_prefix="/v3" if git_service_type == "integrated" else ""
          git_url="https://api.github.com%s/repos/{owner_name}/{repo_name}/statuses/{revision}" % api_prefix
          git_state_mapping = {
            "failed": "failure",
            "canceled": "error",
            "running": "pending",
            "success": "success"
          }
        
        elif git_service_type == "gitlab":
          if "checkout_sha" in webhook_payload.keys():
            git_revision = webhook_payload["checkout_sha"]
          elif "event_type" in webhook_payload.keys() and webhook_payload["event_type"] == "merge_request":
            git_revision = webhook_payload["object_attributes"]["last_commit"]["id"]
          git_url="https://gitlab.com/api/v4/projects/{id}/statuses/{revision}"
          git_state_mapping = {
            "pending": "pending",
            "running": "running",
            "success": "success",
            "failed": "failed",
            "canceled": "canceled"
          }
        
        elif git_service_type == "bitbucket":
          git_revision = ""
          git_state_mapping = {
            "pending": "INPROGRESS",
            "running": "INPROGRESS",
            "success": "SUCCESSFUL",
            "failed": "FAILED",
            "canceled": "STOPPED"
          }
        

        # get status from previous step or as param
        state = "$(params.state)"
        if state == "":
          state = "failed"

        # If state is one of PipelineRun Taks execution status convert it to a generic state one
        if state == "Succeeded":
          state = "success"
        elif state == "Failed":
          state = "failed"
        elif state == "None":
          state = "pending"

        


        # Create the request object according to the Git Flavor API
        if state in git_state_mapping.keys():
          state = git_state_mapping[state]

        if git_service_type == "gitlab":
          git_url = git_url.format(
            id=webhook_payload["project"]["id"],
            revision=git_revision
          )
          
          params = {
            "state": state,
            "description": description,
            "context": context,
            "target_url": target_url
          }
          
          url_query_params = urllib.parse.urlencode(params)
          req = urllib.request.Request(
            git_url + "?" + url_query_params,
            data=None,
            headers={
                "PRIVATE-TOKEN": git_token
            },
            method="POST"
          )

        elif git_service_type == "bitbucketgit":
          git_url = git_url.format()
          # status_url = status_url + "/2.0/repositories/%s/%s/commit/%s/statuses/build" % (webhook_payload["repository"]["owner"]["id"], webhook_payload["repository"]["name"], revision)          
          
          data = {
            "key": os.environ["PIPELINE_ID"],
            "url": target_url,
            "state": state,
            "name": context,
            "description": description
          }
          
          req = urllib.request.Request(
            git_url,
            data=json.dumps(data).encode('utf8'),
            headers={
                "content-type": "application/json",
                "Authorization": "Bearer %s" % git_token
            },
            method="POST"
          )

        else:
          # Default to github
          
          git_url = git_url.format(
            owner_name=webhook_payload["repository"]["owner"]["name"],
            repo_name=webhook_payload["repository"]["name"],
            revision=git_revision
          )

          data = {
            "state": state,
            "target_url": target_url,
            "description": description,
            "context": context
          }
          
          req = urllib.request.Request(
            git_url,
            data=json.dumps(data).encode('utf8'),
            headers={
                "content-type": "application/json",
                "Authorization": "Bearer %s" % git_token
            },
            method="POST"
          )

        req.add_header("User-Agent", "TektonCD, the peaceful cat")
        with urllib.request.urlopen(req) as resp:
          if not str(resp.status).startswith("2"):
            print("Error: %d" % (resp.status))
            print(resp.read())
            sys.exit(1)
          else:
            if os.environ["PIPELINE_DEBUG"] == "1":
              print("Status: %d" % (resp.status))
              print(resp.read())
            sys.exit(0) 